interface User {
  email: string;
  name: string;
  active: boolean;
  admin: boolean;
  // password stuff
  // [key: string | number | symbol]: unknown;
}


interface CreateUserRequest {
  email: string;
  name: string;
  active: boolean;
  admin: boolean;
}

type CreateUserResponse = {
  ok: true;
  result: {
    email: string;
    // TODO
  };
} | {
  ok: false;
  error: string;
}


/*
interface Anything {
  [key: string | number | symbol]: never;
}

interface JustUser {
  [key: string | number | symbol]: key extends;
}

type AnythingUser = Anything & User;

const foo: AnythingUser = {
  email: "hi",
  active: false,
  admin: false,
}

type Foo = keyof User;

const x: Foo = "email";

type Bar = Exclude<string | boolean, boolean>;

type CompleteUser = {
  [key: Exclude<[string | number | symbol], ["email"]>[number]]: never
}
*/

/*

type StuffUser = {
  [key in keyof User]: unknown extends User[key] ? never : User[key];
}

const hi: StuffUser = {
  email: "hi",
  active: false,
  admin: true,
}

*/
