import UserModel from "../models/UserModel";
import { generateRandomPassword } from "../crypto/password";
import { generateToken } from "../crypto/token";
import { expiredDate } from "./users";
import { HydratedDocument } from "mongoose";
import _ from "lodash";
import { User } from "../models/UserModel";

interface CreateUserFields {
  email: string;
  active: boolean;
  admin: boolean;
  name: string;
}

function userToJSON(user: HydratedDocument<User>) {
  return _.pick(user, "email", "active", "admin", "name");
}

async function createUser({ email, active, admin, name }: CreateUserFields) {
  // Assign a random password to prevent new users from logging in until they
  // reset their password. This implementation guarantees that the user always
  // has a password, which simplifies things compared to checking for an empty
  // string, null, etc.
  const { key, salt } = generateRandomPassword();

  // Similarly, guarantee that the user always has a password reset token and
  // session token to avoid edge cases. These tokens can't be used because the
  // expiration dates are in the past, and also because the original (unhashed)
  // tokens are discarded.
  const { hashedToken: hashedPasswordResetToken } = generateToken();
  const { hashedToken: hashedSessionToken } = generateToken();

  const user = new UserModel({
    email,
    active,
    admin,
    passwordKey: key,
    passwordSalt: salt,
    hashedSessionToken,
    sessionExpiration: expiredDate(),
    hashedPasswordResetToken,
    passwordResetExpiration: expiredDate(),
    name,
  });

  return user.save();
}

/**
 * If there are no active admin accounts, create or reactivate the specified
 * account and give it admin privileges.
 */
async function ensureAdminExists(email: string) {
  const admin = await UserModel.findOne({ active: true, admin: true });
  if (admin !== null) {
    console.log(`An admin already exists: ${admin.email}`);
    return;
  }

  const fallbackAdmin = await UserModel.findOne({ email });
  if (fallbackAdmin === null) {
    await createUser({ email, active: true, admin: true, name: "Admin" });
    console.log(`Created admin account: ${email}`);
  } else {
    fallbackAdmin.active = true;
    fallbackAdmin.admin = true;
    await fallbackAdmin.save();
    console.log(`Reactivated admin account: ${email}`);
  }
}

export {
  createUser,
  ensureAdminExists,
}
